<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="convert" noun="Image">
        <description>Convert an image from one type to another. See for reference: https://www.baeldung.com/java-copy-file</description>
        <in-parameters>
            <parameter name="inputImageStream" type="java.io.InputStream" required="true"/>
            <parameter name="outputResourceReference" type="org.moqui.resource.ResourceReference"/>
            <parameter name="outputImageFormat" required="true"><description>Supports the values: jpg, png, tiff, webp, gif</description></parameter>
        </in-parameters>
        <out-parameters>
        </out-parameters>
        <actions>
<!--            <set field="inputImage" from="inputImageItem.getStoreLocation()"/>-->
            <!-- Create temporary file to convert into -->
<!--            <set field="outputImage" from="inputImage.createTempFile('processed', '.' + outputImageFormat, inputImage.getParentFile())"/>-->


<!--            <set field="outputImageStream" type="java.io.OutputStream"/>-->
<!--            <set field="inputDbResourceStream" type="java.io.InputStream" from="outputResourceReference.openStream()"/>-->
            <!-- See why PipedOutputStream and PipedInputStream here: https://stackoverflow.com/questions/5778658/how-to-convert-outputstream-to-inputstream -->
            <script><![CDATA[
                import org.fit.cssbox.css.Output
                import org.moqui.util.ObjectUtilities

                import javax.imageio.*
                import java.awt.Color
                import java.awt.image.BufferedImage
                import java.io.PipedInputStream
                import java.io.PipedOutputStream

                import java.nio.file.Files

                // Thanks to https://stackoverflow.com/questions/2290336/converting-png-into-jpeg for the great example maybe also see: https://stackoverflow.com/questions/464825/converting-transparent-gif-png-to-jpeg-using-java
//                try {

//                ec.logger.warn("outputResourceReference.getLocation() == null ${outputResourceReference.getLocation() == null}")
//                ec.logger.warn("outputResourceReference.getLocation() ${outputResourceReference.getLocation()}")
//                dbresourceInputStream = outputResourceReference.openStream();
//                ec.logger.warn("dbresourceInputStream == null ${dbresourceInputStream == null}")

//                outputImageStream = new ByteArrayOutputStream(dbresourceInputStream);
                // in a background thread, write the given output stream to the
                // PipedOutputStream for consumption
//                new Thread(() -> {originalOutputStream.writeTo(outputImageStream);}).start();

//                File outputFile = File.createTempFile("processed", "." + outputImageFormat)

//                try {
//                    BufferedImage image = ImageIO.read(inputImageStream)
//                    BufferedImage result = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB)
//                    result.createGraphics().drawImage(image, 0, 0, Color.WHITE, null)
//
//                    ImageIO.write(result, outputImageFormat, outputFile)
//                } finally {
//
//                }

//                ImageIO.write(result, outputImageFormat, outputResourceReference.getOutputStream())

                OutputStream outputImageStream = new ByteArrayOutputStream();
                BufferedImage image = ImageIO.read(inputImageStream)
                // If can't write image it's probably a png converting to jpg and extra steps need to happen
                if (!ImageIO.write(image, outputImageFormat, outputImageStream)) {
                    BufferedImage result = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB)
                    result.createGraphics().drawImage(image, 0, 0, Color.WHITE, null)
                    ImageIO.write(result, outputImageFormat, outputImageStream)
                    result = null
                }
                // removed referenced result so garbage collector can pick it up while we're saving the byte array
                image = null
                try { outputResourceReference.putBytes(outputImageStream.toByteArray()) }
                finally { outputImageStream.close() }

//                try {
//                    outputImageStream = Files.newInputStream(outputFile.toPath())
//                    if (outputImageStream == null) ec.logger.warn("outputImageStream == ${outputImageStream}")
//                    outputResourceReference.putStream(outputImageStream)
//                } finally {
//                    // outputImageStream?.flush()
//                    outputImageStream?.close()
//                }

//                } catch (Exception exp) {
//                    exp.printStackTrace()
//                }
                ]]></script>
            <log level="warn" message="outputImageFormat ${outputImageFormat}"/>
<!--            <log level="warn" message="outputFile?.length() ${outputFile?.length()}"/>-->
<!--            <log level="warn" message="outputFile?.getPath() ${outputFile?.getPath()}"/>-->
<!--            <log level="warn" message="Files.probeContentType(outputFile?.toPath()) ${Files.probeContentType(outputFile?.toPath())}"/>-->

            <log level="warn" message="outputResourceReference?.getSize() ${outputResourceReference?.getSize()}"/>
            <log level="warn" message="outputResourceReference?.getParent() ${outputResourceReference?.getParent()}"/>
            <log level="warn" message="outputResourceReference?.getFileName() ${outputResourceReference?.getFileName()}"/>
            <log level="warn" message="outputResourceReference?.getContentType() ${outputResourceReference?.getContentType()}"/>
        </actions>
    </service>
</services>
