<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="convert" noun="Image">
        <description>Convert an image from one type to another. See for reference: https://www.baeldung.com/java-copy-file</description>
        <in-parameters>
            <parameter name="inputImageStream" type="java.io.InputStream" required="true"/>
            <parameter name="outputResourceReference" type="org.moqui.resource.ResourceReference" required="true"/>
            <parameter name="outputImageFormat" required="true"><description>Supports the values: jpg, png, tiff, webp, bmp, wbmp</description></parameter>
            <parameter name="outputImagePixelWidth" type="Integer"><description>Defaults to inputImageStream's pixel width. Aspect ratio is kept by default but ignores exif metadata rotations.</description></parameter>
        </in-parameters>
        <out-parameters>
        </out-parameters>
        <actions>
            <script><![CDATA[
                import javax.imageio.*
                import javax.imageio.metadata.IIOMetadata
                import java.awt.Color
                import java.awt.image.BufferedImage
                import java.awt.image.BufferedImageOp
                import com.twelvemonkeys.image.ResampleOp
                import javax.imageio.stream.ImageInputStream
                import javax.imageio.stream.ImageOutputStream

                // Thanks to https://stackoverflow.com/questions/2290336/converting-png-into-jpeg for the great example maybe also see: https://stackoverflow.com/questions/464825/converting-transparent-gif-png-to-jpeg-using-java
                OutputStream outputImageStream = new ByteArrayOutputStream()
                BufferedImage image = ImageIO.read(inputImageStream)
//                BufferedImage image = null

//                ec.logger.warn("image type ${image.getType()}")
//                ec.logger.info("Resampling image from ${image.getWidth()} to ${outputImagePixelWidth} pixels wide and ${image.getHeight()} to ${outputImagePixelWidth * image.getHeight() / image.getWidth()} with an aspect ratio of ${image.getWidth()/image.getHeight()}")

                if (outputImagePixelWidth && outputImagePixelWidth < image.getWidth()) {
                    // aspect ratio = pixel width / pixel height so new pixel height = new pixel width / aspect ratio if aspect ratio is pixel width / pixel height then new pixel height = new pixel width * (pixel height / pixel width)
                    ec.logger.info("Resampling image from ${image.getWidth()} to ${outputImagePixelWidth} pixels wide and ${image.getHeight()} to ${outputImagePixelWidth * image.getHeight() / image.getWidth()} with an aspect ratio of ${image.getWidth()/image.getHeight()}")
                    BufferedImageOp resampler = new ResampleOp(outputImagePixelWidth, (outputImagePixelWidth * image.getHeight() / image.getWidth()).intValue(), ResampleOp.FILTER_LANCZOS); // A good default filter, see class documentation for more info
                    image = resampler.filter(image, null);
                }

                // If can't write image it's probably a png converting to jpg and extra steps need to happen
                if (!ImageIO.write(image, outputImageFormat, outputImageStream)) {
                    BufferedImage result = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB)
                    result.createGraphics().drawImage(image, 0, 0, Color.WHITE, null)
                    if (!ImageIO.write(result, outputImageFormat, outputImageStream)) {
                        throw "cannot write image"
                    }
                    // removed referenced result so garbage collector can pick it up while we're saving the byte array
                    result = null
                }
                // removed referenced result so garbage collector can pick it up while we're saving the byte array
                image = null

                try { outputResourceReference.putBytes(outputImageStream.toByteArray()) }
                finally { outputImageStream.close() }
                ]]></script>
<!--            <log level="warn" message="outputImageFormat ${outputImageFormat}"/>-->
<!--            <log level="warn" message="outputResourceReference?.getSize() ${outputResourceReference?.getSize()}"/>-->
<!--            <log level="warn" message="outputResourceReference?.getParent() ${outputResourceReference?.getParent()}"/>-->
<!--            <log level="warn" message="outputResourceReference?.getFileName() ${outputResourceReference?.getFileName()}"/>-->
<!--            <log level="warn" message="outputResourceReference?.getContentType() ${outputResourceReference?.getContentType()}"/>-->
        </actions>
    </service>
</services>
